else if (strcmp(argv[1], "-SRTN") == 0)
  {
    printf("intered SRTN algorithm\n" );
    long processInterTime;
    while(1){
        if(firstIteration){
            initializePQueue(Q);
            printf("Priority Q initialized\n");
            pid = getpid();
            firstIteration = 0;
        }
        pData recievedData;
        size_t rcv = msgrcv(msgqid1, &recievedData, sizeof(recievedData), 0, IPC_NOWAIT);
        if (rcv == -1) {
            //perror("Error in recieve\n");

  }  else {
      printf("Message Recieved\n");
    //fork a process for the comming data
    printf("\n %d %d\n",recievedData.arrival,recievedData.runtime );
        int cpid = fork();
        if(cpid == -1) {
            printf("Error in fork..\n");
        }
        else if(cpid == 0) {
            char buf[3];
            // itoa(currentProcessData.runtime, buf, 10);
            sprintf(buf, "%d", recievedData.runtime);
            printf("recievedData.runtime %d\n", recievedData.runtime);
            char *argv[] = { "./process.out", buf, 0};
            execve(argv[0], &argv[0], NULL);
        }else {
            recievedData.id = cpid;
            recievedData.isRunning == false;
              kill(recievedData.id,SIGSTOP);
            //check if there is an algorithm running
            if (available == true)
              {
                printf("there was no processes running so this process started\n" );
                runningProcess.id = recievedData.id;
                runningProcess.runtime = recievedData.runtime;
                printf("\n data id %d\n",cpid );
                runningProcess.isRunning = 1;
                available = false;
                processInterTime = getClk();
                recievedData.remainingT = recievedData.runtime - ((getClk()-processInterTime)/CLOCKS_PER_SEC);
                //if it is there one running compare between the running time
                printf("runningProcess.remainingT %d\n",recievedData.remainingT );
              }
            else {
              //if there is no process running run the current one
              //calculate the time passed in the currentProc
              runningProcess.remainingT = runningProcess.runtime - ((getClk()-processInterTime)/CLOCKS_PER_SEC);
              //if it is there one running compare between the running time
              printf("runningProcess.remainingT %d\n",runningProcess.remainingT );
                if(recievedData.remainingT < runningProcess.remainingT )
                  {
                      kill(runningProcess.id,SIGSTOP);
                      kill(recievedData.id,SIGCONT);
                      //kill(recievedData.id,SIGCONT); //it is already running
                      //reaProc = insertSorted(reaProc,currentProc);
                      runningProcess.priority = runningProcess.remainingT;
                      push(Q,runningProcess);
                      // it will be more effiecient if you write copy constructor
                      runningProcess.id = recievedData.id;
                      runningProcess.arrival = recievedData.arrival;
                      runningProcess.priority = recievedData.priority;
                      runningProcess.remainingT = recievedData.remainingT;
                      runningProcess.runtime = recievedData.runtime;
                      processInterTime = getClk();
                  }
                  else
                  {
                    // use insert sorted to insert the one you want in the ready queue
                    //reaProc = insertSorted(reaProc,recievedData);
                    push(Q,recievedData);
                  }
                }
                if (Q->len != 0 && available == true) {
                    printf("Condition is true\n");
                    runningProcess = pop(Q);
                    runningProcess.isRunning = 1;
                    printf("Process %d is now active\n", runningProcess.id);
                    fprintf(logFilePtr, "At time %d process %d started arr %d remain %d wait %d\n",
                            getClk(),runningProcess.id, runningProcess.arrival, runningProcess.runtime, (runningProcess.arrival-getClk()));
                    kill(runningProcess.id, SIGCONT);
                    available = false;
                }
              }
      }
     }
